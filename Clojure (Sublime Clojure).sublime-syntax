%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: Clojure (Sublime Clojure)
file_extensions: [clj, cljs, cljc, cljx, boot]
scope: source.clojure
variables:
  ws:           '(?:\s|(,))*'
  wsb:          '(?<=^|[\s,()\[\]{}~''`"^@]|#_)'
  wse:           '(?=$|[\s,()\[\]{}";])'
  nwse:              '[^\s,()\[\]{}";]'
  sym_head:     '[\p{Alpha}*!_?$%&=<>]'
  sym_head_lax: '[\p{Alpha}*!_?$%&=<>''\-+.#:]'
  sym_body:     '[\p{Alpha}*!_?$%&=<>''\-+.#:0-9]'
  ns_symbol:    '(?:[\-+.]|[\-+.]{{sym_head_lax}}{{sym_body}}*|{{sym_head}}{{sym_body}}*)'
  symbol:       '(?:/|{{ns_symbol}})'
  kw_head:      '[\p{Alpha}*!_?$%&=<>''\-+.#0-9]'
  kw_body:      '[\p{Alpha}*!_?$%&=<>''\-+.#0-9:]'
  keyword:      '{{kw_head}}{{kw_body}}*'
  regexp_name:  '[a-zA-Z][a-zA-Z0-9]*'
contexts:
  main:
    - include: forms
    - include: stray-brackets

  forms:
    - include: var_quote
    - include: deref
    - include: reader_conditionals
    - include: syntax_quote
    - include: quote
    - include: defs
    - include: anonymous_fn
    - include: metadata
    - include: regexp
    - include: string
    - include: character
    - include: comment
    - include: keyword
    - include: constant
    - include: symbol
    - include: integer
    - include: float
    - include: ratio
    - include: tag
    - include: list
    - include: vector
    - include: map
    - include: set
    - match: ','
      scope: punctuation.definition.comma.clojure 

  var_quote:
    - match: '(#''){{ws}}'
      captures:
        1: keyword.operator.var.clojure
        2: punctuation.definition.comma.clojure

  deref:
    - match: '(@){{ws}}'
      captures:
        1: keyword.operator.deref.clojure
        2: punctuation.definition.comma.clojure


  reader_conditionals:
    - match: '#\?@?{{ws}}\('
      scope: punctuation.section.parens.begin.clojure
      captures:
        1: punctuation.definition.comma.clojure
      push:
        - meta_scope: meta.parens
        - match: '\)'
          scope: punctuation.section.parens.end.clojure
          pop:   true
        - include: forms

  quote:
    - match: '(''){{ws}}'
      captures:
        1: keyword.operator.quote.clojure
        2: punctuation.definition.comma.clojure
      push:
        - meta_scope: meta.quoted.clojure
        - include: forms
        - match: ''
          pop: true

  syntax_quote:
    - match: '(~@?){{ws}}'
      captures: 
        1: keyword.operator.unquote.clojure
        2: punctuation.definition.comma.clojure
      push:
        - meta_scope: meta.unquoted.clojure
        - include: forms
        - match: ''
          pop: true
    - match: '(`){{ws}}'
      captures:
        1: keyword.operator.quote.syntax.clojure
        2: punctuation.definition.comma.clojure
      push:
        - meta_scope: meta.quoted.syntax.clojure
        - include: forms
        - match: ''
          pop: true

  metadata:
    - match: '(\^){{ws}}'
      captures:
        1: punctuation.definition.metadata.begin.clojure
        2: punctuation.definition.comma.clojure
      push:
        - meta_scope: meta.metadata.clojure
        - include: map
        - include: keyword
        - include: symbol
        - include: string
        - match: ''
          pop: true

  defs:
    - match: '(\()(?:def{{symbol}}*|{{ns_symbol}}(/)def{{symbol}}*|ns)(?=\s|\))'
      captures:
        1: punctuation.section.parens.begin.clojure
        2: punctuation.definition.symbol.namespace.clojure
      push:
        - meta_scope: meta.parens meta.definition.clojure source.symbol.clojure
        - match: '{{wsb}}(?:{{symbol}}|{{ns_symbol}}(/){{symbol}}){{wse}}'
          scope: source.symbol.clojure entity.name.clojure
          captures:
            1: punctuation.definition.symbol.namespace.clojure
          set:
            - meta_content_scope: meta.parens meta.definition.clojure
            - include: forms
            - match: '\)'
              scope: meta.parens meta.definition.clojure punctuation.section.parens.end.clojure
              pop: true
            - include: stray-brackets
        - match: '\)'
          scope: punctuation.section.parens.begin.clojure
          pop: true
        - include: forms
        - include: stray-brackets

  anonymous_fn:
    - match: '#\('
      scope: punctuation.section.parens.begin.clojure
      push:
      - meta_scope: meta.parens.clojure meta.function.clojure
      - match: \)
        scope: punctuation.section.parens.end.clojure
        pop:   true
      - include: main

  constant:
    - match: '{{wsb}}(nil|true|false){{wse}}'
      scope: constant.language.clojure
    
  regexp_quote:
    - match: '\\Q'
      scope: punctuation.section.quotation.begin.clojure
      push:
        - meta_content_scope: constant.character.escape.clojure
        - match: '\\"'
        - match: '(?=")'
          pop:   true
        - match: '\\E'
          scope: punctuation.section.quotation.end.clojure
          pop: true

  regexp_shared:
    - match: '(\\)(\\|0[0-3]?[0-7]{1,2}|x\h{2}|u\h{4}|x\{1?\h{1,5}\}|\N\{[a-zA-Z0-9\- ]+\}|[tnrfae]|c[A-Z]|[dDhHsSvVwW]|p\{[a-zA-Z]+\}|b\{g\}|[bBAGZz]|[RX]|[0-9]+|k<{{regexp_name}}>|[^a-zA-Z0-9])|((\\).)'
      scope: constant.character.escape.clojure
      captures:
          1: punctuation.definition.character.escape.begin.clojure 
          3: invalid.illegal.escape.regexp.clojure
          4: punctuation.definition.character.escape.begin.clojure
    - match: '"'
      scope: punctuation.definition.string.end.clojure
      pop: true
    - match: '(\[)(\^)?(-)?'
      captures:
        1: punctuation.section.brackets.begin.clojure
        2: keyword.operator.negation.regexp.clojure
      push:
      - match: '(?=")'
        pop:   true
      - match: '\]'
        scope: punctuation.section.brackets.end.clojure
        pop: true
      - match: '-(?!\])'
        scope: keyword.operator.range.regexp.clojure
      - match: '&&'
        scope: keyword.operator.intersection.regexp.clojure
      - include: regexp_shared
    - match: '(?:[?*+]|\{\d+(?:,(?:\d+)?)?\})[?+]?'
      scope: keyword.operator.quantifier.regexp.clojure

  regexp_group:
    - include: regexp_quote
    - include: regexp_shared
    - match: '\|'
      scope: keyword.operator.union.regexp.clojure
    - match: '(\()(\?(<{{regexp_name}}>|:|=|!|<=|<!|>|[idmsux]*(-[idmsux]+)?:|[idmsuxU]*(-[idmsuxU]+)?(?!:)))?'
      captures:
        1: punctuation.section.parens.begin.clojure
        2: keyword.operator.special.regexp.clojure
      push:
      - match: '(?=")'
        pop:   true
      - match: '\)'
        scope: punctuation.section.parens.end.clojure
        pop: true
      - include: regexp_group
    - match: '[\)]'
      scope: invalid.illegal.stray-bracket-end

  regexp:
    - match: '{{wsb}}#"'
      scope: punctuation.definition.string.begin.clojure
      push:
      - meta_scope: string.regexp.clojure
      - include: regexp_group

  string:
    - match: '{{wsb}}"'
      scope: punctuation.definition.string.begin.clojure
      push:
      - meta_scope: string.quoted.double.clojure
      - match: '(\\)(u\h{4}|b|t|n|f|r|"|''|\\|[0-3]?[0-7]{1,2})|((\\).)'
        scope: constant.character.escape.clojure
        captures:
          1: punctuation.definition.character.escape.begin.clojure 
          3: invalid.illegal.escape.string.clojure
          4: punctuation.definition.character.escape.begin.clojure
      - match: '"'
        scope: punctuation.definition.string.end.clojure
        pop: true

  character:
    - match: '{{wsb}}((\\)(u\h{4}|o[0-3]?[0-7]{1,2}|newline|tab|space|backspace|formfeed|return|[^\s]){{wse}}|((\\){{nwse}}*))'
      scope: constant.character.clojure
      captures:
        2: punctuation.definition.character.begin.clojure
        4: invalid.illegal.character.clojure
        5: punctuation.definition.character.begin.clojure
        
  comment: # TODO Clojure (comment)
    - match: '(;+).*$'
      scope: comment.line.semicolon.clojure
      captures:
        1: punctuation.definition.comment.clojure
    - match: '#_'
      scope: comment.block.clojure punctuation.definition.comment.clojure

  symbol:
    - match: '{{wsb}}(?:{{symbol}}|{{ns_symbol}}(/){{symbol}}){{wse}}'
      scope: source.symbol.clojure
      captures:
        1: punctuation.definition.symbol.namespace.clojure

  keyword:
    - match: '{{wsb}}(::?){{keyword}}(?:(/){{keyword}})?{{wse}}'
      scope: constant.other.keyword.clojure
      captures:
        1: punctuation.definition.constant.begin.clojure
        2: punctuation.definition.constant.namespace.clojure

  integer:
    - match: '{{wsb}}[+-]?(?:0|[1-9][0-9]*)(N)?{{wse}}'
      scope: constant.numeric.integer.clojure
      captures:
        1: punctuation.definition.integer.precision.clojure

  float:
    - match: '{{wsb}}[+-]?(?:0|[1-9][0-9]*)(?:(M)|\.[0-9]*(M)?|[eE][+-]?[0-9]+(M)?|\.[0-9]*[eE][+-]?[0-9]+(M)?){{wse}}'
      scope: constant.numeric.float.clojure
      captures:
        1: punctuation.definition.float.precision.clojure
        2: punctuation.definition.float.precision.clojure
        3: punctuation.definition.float.precision.clojure
        4: punctuation.definition.float.precision.clojure
    - match: '{{wsb}}(##Inf|##-Inf|##NaN){{wse}}'
      scope: constant.numeric.float.clojure

  ratio:
    - match: '{{wsb}}[+-]?(0|[1-9][0-9]*)/[1-9][0-9]*{{wse}}'
      scope: constant.numeric.ratio.clojure

  tag:
    - match: '{{wsb}}(#inst\s*"\d\d\d\d(?:-[01]\d(?:-[0123]\d(?:T[012]\d(?::[012345]\d(?::[0123456]\d(?:[.]\d{1,9})?)?)?)?)?)?(?:Z|[-+][012]\d:[012345]\d)?"|(#inst\s*"[^"]*")){{wse}}'
      scope: constant.other.instant.clojure
      captures:
        2: invalid.illegal.instant.clojure
    - match: '{{wsb}}(#uuid\s*"\h{8}-\h{4}-\h{4}-\h{4}-\h{12}"|(#uuid\s*"[^"]*")){{wse}}'
      scope: constant.other.uuid.clojure
      captures:
        2: invalid.illegal.uuid.clojure
    - match: '{{wsb}}#(?![_#{])(?:{{symbol}}|{{ns_symbol}}(/){{symbol}}){{wse}}'
      scope: storage.type.tag.clojure

  list:
    - match: '\('
      scope: punctuation.section.parens.begin.clojure
      push:
      - meta_scope: meta.parens.clojure
      - match: \)
        scope: punctuation.section.parens.end.clojure
        pop:   true
      - include: main

  vector:
    - match: \[
      scope: punctuation.section.brackets.begin.clojure
      push:
      - meta_scope: meta.brackets.clojure
      - match: \]
        scope: punctuation.section.brackets.end.clojure
        pop:   true
      - include: main

  map:
    - match: '\{'
      scope: punctuation.section.braces.begin.clojure
      push:
      - meta_scope: meta.braces.clojure
      - match: \}
        scope: punctuation.section.braces.end.clojure
        pop:   true
      - include: main

  set:
    - match: '#\{'
      scope: punctuation.section.braces.begin.clojure
      push:
      - meta_scope: meta.braces.clojure
      - match: \}
        scope: punctuation.section.braces.end.clojure
        pop:   true
      - include: main

  stray-brackets:
    - match: '[\]\)\}]'
      scope: invalid.illegal.stray-bracket-end

